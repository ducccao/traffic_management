
@{
    ViewBag.Title = "Feedback";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div class="container">
    <h2 class="mb-5">Gửi đánh giá của bạn</h2>
    <form id="fmSendFeedback" >

        <textarea class="form-control" type="text" id="Content">

         </textarea>
        <button type="submit" class="btn btn-success form-group w-25 float-right mt-2 py-3 ">Gửi</button>



    </form>



</div>


@section Scripts{
   @*<script src="https://cdn.tiny.cloud/1/6a2wdzaqh764emfqjwf4g5s2kr8ajq1vbfrcipng9eu1o2il/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>



  <script>
    tinymce.init({
        selector: '#Content',
      plugins: 'a11ychecker advcode casechange formatpainter linkchecker autolink lists checklist media mediaembed pageembed permanentpen powerpaste table advtable tinycomments tinymcespellchecker',
      toolbar: 'a11ycheck addcomment showcomments casechange checklist code formatpainter pageembed permanentpen table',
      toolbar_mode: 'floating',
      tinycomments_mode: 'embedded',
      tinycomments_author: 'Author name',
   });
  </script>*@

    <script>

        function sendFeedback() {
            const fmSendFeedback = $("#fmSendFeedback");


            const today = new Date();
            const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();
            const time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
            const CreatedAt = date + ' ' + time;

            const url = `https://localhost:44328/api/feedbacks`

            fmSendFeedback.on("submit", e => {
                e.preventDefault();

                const Content = $("textarea").val();

                const data = {
                    Content: Content,
                    Date: CreatedAt
                }


                console.log(data)
                console.log(Content);
                //console.log(Content.val());

                if (data.Content === "") {

                    let timerInterval
                    Swal.fire({
                        title: 'Invalid Value!',
                        //  html: 'I will close in <b></b> milliseconds.',
                        timer: 2000,
                        icon: "error",
                        //  timerProgressBar: true,
                        didOpen: () => {
                            Swal.showLoading()
                            timerInterval = setInterval(() => {
                                const content = Swal.getContent()
                                if (content) {
                                    const b = content.querySelector('b')
                                    if (b) {
                                        b.textContent = Swal.getTimerLeft()
                                    }
                                }
                            }, 100)
                        },
                        willClose: () => {
                            clearInterval(timerInterval)
                        }
                    }).then((result) => {
                        /* Read more about handling dismissals below */
                        if (result.dismiss === Swal.DismissReason.timer) {
                            console.log('I was closed by the timer')
                        }
                    })

                    return;
                }


                $.ajax({
                    type: "post",
                    url: url,
                    data: data,
                    success: data => {
                        console.log(data);
                        let timerInterval
                        Swal.fire({
                            title: 'Send Feedback Success!',
                            //  html: 'I will close in <b></b> milliseconds.',
                            timer: 2000,
                            icon: "success",
                            //  timerProgressBar: true,
                            didOpen: () => {
                                Swal.showLoading()
                                timerInterval = setInterval(() => {
                                    const content = Swal.getContent()
                                    if (content) {
                                        const b = content.querySelector('b')
                                        if (b) {
                                            b.textContent = Swal.getTimerLeft()
                                        }
                                    }
                                }, 100)
                            },
                            willClose: () => {
                                clearInterval(timerInterval)
                            }
                        }).then((result) => {
                            /* Read more about handling dismissals below */
                            if (result.dismiss === Swal.DismissReason.timer) {
                                console.log('I was closed by the timer')
                            }
                        })
                    },
                    // ajax error
                    error: er => {
                        console.log(er);

                        let timerInterval
                        Swal.fire({
                            title: 'Send Feedback Fail!',
                            //  html: 'I will close in <b></b> milliseconds.',
                            timer: 2000,
                            icon: "error",
                            //  timerProgressBar: true,
                            didOpen: () => {
                                Swal.showLoading()
                                timerInterval = setInterval(() => {
                                    const content = Swal.getContent()
                                    if (content) {
                                        const b = content.querySelector('b')
                                        if (b) {
                                            b.textContent = Swal.getTimerLeft()
                                        }
                                    }
                                }, 100)
                            },
                            willClose: () => {
                                clearInterval(timerInterval)
                            }
                        }).then((result) => {
                            /* Read more about handling dismissals below */
                            if (result.dismiss === Swal.DismissReason.timer) {
                                console.log('I was closed by the timer')
                            }
                        })
                    }
                })
            })
        }

        sendFeedback();

    </script>

}